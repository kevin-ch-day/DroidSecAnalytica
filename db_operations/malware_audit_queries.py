from . import db_conn

def get_incomplete_hash_records():
    """Retrieve records in hash_data_ioc that are missing MD5, SHA1, or SHA256."""
    query = """
        SELECT id, md5, sha1, sha256, created_at
        FROM hash_data_ioc
        WHERE md5 IS NULL OR sha1 IS NULL OR sha256 IS NULL
    """
    return db_conn.generate_df_from_query(query)

def get_unlinked_hashes():
    """Retrieve hashes from hash_data_ioc that are missing in malware_samples."""
    query = """
        SELECT h.sha256 AS Missing_Hash
        FROM hash_data_ioc h
        LEFT JOIN malware_samples m ON h.sha256 = m.sha256
        WHERE m.sha256 IS NULL
    """
    return db_conn.generate_df_from_query(query)

def get_unanalyzed_samples():
    """Retrieve the count of samples in malware_samples that have not been analyzed in analysis_metadata."""
    query = """
        SELECT COUNT(m.sha256) AS Unanalyzed_Samples
        FROM malware_samples m
        LEFT JOIN analysis_metadata a ON m.sha256 = a.sha256
        WHERE a.sha256 IS NULL
    """
    result = db_conn.execute_query(query, fetch=True)
    return result[0][0] if result else 0

def get_analysis_status():
    """Retrieve count of analyzed and pending samples from malware_samples and analysis_metadata."""
    total_query = "SELECT COUNT(*) FROM malware_samples"
    analyzed_query = """
        SELECT COUNT(DISTINCT a.sha256) 
        FROM analysis_metadata a 
        JOIN malware_samples m ON a.sha256 = m.sha256
        WHERE a.analysis_status = 'Completed'
    """

    total_samples = db_conn.execute_query(total_query, fetch=True)[0][0]
    analyzed_samples = db_conn.execute_query(analyzed_query, fetch=True)[0][0]
    pending_samples = total_samples - analyzed_samples

    return analyzed_samples, total_samples, pending_samples

def get_most_common_malware():
    """Retrieve the most frequently detected malware samples based on classification."""
    query = """
        SELECT sample_classification AS Malware_Type, COUNT(*) AS Occurrences
        FROM analysis_metadata
        GROUP BY sample_classification
        ORDER BY Occurrences DESC
        LIMIT 10
    """
    return db_conn.generate_df_from_query(query)

def get_oldest_unanalyzed_samples():
    """Retrieve the oldest malware samples that have not been analyzed."""
    query = """
        SELECT m.sha256, m.vt_first_submission
        FROM malware_samples m
        LEFT JOIN analysis_metadata a ON m.sha256 = a.sha256
        WHERE a.sha256 IS NULL
        ORDER BY m.vt_first_submission ASC
        LIMIT 10
    """
    return db_conn.generate_df_from_query(query)

def get_sample_submission_trends():
    """Analyze malware submission trends over time."""
    query = """
        SELECT YEAR(vt_first_submission) AS Year, MONTH(vt_first_submission) AS Month, COUNT(*) AS Submissions
        FROM malware_samples
        GROUP BY Year, Month
        ORDER BY Year DESC, Month DESC
    """
    return db_conn.generate_df_from_query(query)