# vt_malware_classification

# Python Libraries
from typing import Any
import pandas as pd

# Custom Libraries
from database import db_update_records, db_malware_classification
from . import vendor_classifications

def malware_classification(analysis_id: int, andro_data: Any):
    try:
        print("\nStarting Malware Classification Process...")
        sha256_hash = andro_data.get_sha256()
        results = db_malware_classification.get_malware_classification_details(sha256_hash)

        if not results:
            print("[ERROR] No results from database for malware classification.")
            exit(1)
            return

        # Define expected column names
        expected_columns = [
            'APK ID', 'Name', 'Family', 'Virustotal', 
            'AhnLab_V3', 'Alibaba', 'Ikarus', 'Kaspersky', 
            'Microsoft', 'Tencent', 'ZoneAlarm'
        ]

        # Convert tuple to dictionary with column mappings
        if isinstance(results, tuple):
            results = dict(zip(expected_columns, results))  # Map columns to tuple values
            results = [results]  # Convert single dict to a list for Pandas DataFrame

        elif isinstance(results, dict):
            results = [results]  # Convert single dictionary to list

        # Convert to DataFrame
        df = pd.DataFrame(results)
        if df.shape[1] != len(expected_columns):
            print(f"[ERROR] DataFrame column mismatch! Expected {len(expected_columns)} columns, but got {df.shape[1]}")
            print(f"[DEBUG] DataFrame contents:\n{df}")
            exit(1)
        
        if df.empty:
            print("\n[ERROR] DataFrame for malware classification is empty.")
            return
        
        analysis_results = vendor_classifications.analyze_classifications(df)
        if not analysis_results:
            print("No analysis results to process for malware classification.")
            return


        # Iterate over the items in analysis_results
        for apk_id, vt_engine_data in analysis_results.items(): 
            classification = vendor_classifications.data_classification(vt_engine_data)
            
            print(f"\nDroidSecAnalytica: {classification}")
            db_update_records.update_analysis_classification(analysis_id, classification)
        
    except Exception as e:
        print(f"[ERROR] Malware classification failed: {e}")
        exit(1)